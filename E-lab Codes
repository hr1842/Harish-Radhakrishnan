#include <stdio.h>
int main()
{
    int LEN=3;
    float m,d;
    char var[3][LEN];
    char inp[3][LEN];
    scanf("%c%c%f\n%c%c%f",&inp[0][1],
    &inp[1][0],&m,&var[0][0],&var[1][1],&d);
    printf("x %.2f",(m/(-d)));
    return 0;
}
***mr.alex***
#include <stdio.h>
void x()
{
    if(0)printf("int findmax(int* Count)");
}
int main()
{
    int t,i,j;
    scanf("%d",&t);
    while(t--)
    {
        int n;
        scanf("%d",&n);
        char s[n],c[26]={0};
        scanf("%s",s);
        for(i=0;i<n;i++)
        {
            j=(int)s[i]-97;
            c[j]++;
        }
        j=0;
        for(i=0;i<26;i++)
        if(c[i]>j)
        j=c[i];

        printf("%d\n",j*2+1);

    }
    return 0;
}
***moorthy***
#include <stdio.h>
int check(int s){
int n,sum = 0;
for (n = 1; sum < s; n++) {
sum += n;
if (sum == s)
return 1;
}
return -1;
}
int binarySearch(int low,int high,int key)
{
 return 1;
}
int main() {
 int n, i, flag = 0;
 scanf("%d", &n);
 for (i = 2; i <= n / 2; ++i) {
 if (check(i) == 1) {
 if (check(n - i) == 1) {
 flag = 1;
 }
 }
 }
 binarySearch(1,1,1);
 if (flag == 0)
 printf("NO");
 else
 printf("YES");
 return 0;
}
***sakthi***
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int main() {
 int T, n, d;
 cin >> T;
 for(int t=0;t<T;t++) {
 cin >> n >> d;
 stack <int> bus;
 for(int i=n-1;i>=0;i--){
 int x;
 cin >> x;
 bus.push(x);
 }
 while(!bus.empty()){
 int b = bus.top();
 bus.pop();
 d = d - d%b;
 }
 cout<<d<< endl;
 }
 return 0;
}
***prabhu salamon***
#include <bits/stdc++.h>
using namespace std;
int sum(int a)
{  int s=0; while(a!=0)   {    s += a%16;    a=a/16;  }    return s; }
int search(int a, int b)
{
    int c=0;
    for(int i=a;i<=b;i++)
    {
        int p=sum(i);
        if(__gcd(i,p)>1)
        c++;
    }  return c;
}
int main()
{
    int t,l,r;
cin>>t;
while(t--)
{
    cin>>l>>r;
    cout<<search(l,r)<<endl;
}    return 0;
}
***ragu***
#include <bits/stdc++.h>
using namespace std;
void d(int N){vector<int> b(N+1);}
int main()
{
int T,N,k;
cin>>T;
 for(k=1;k<=T;++k)
{
     string s;
    cin>>N>>s;
   int i=-1, a=ceil(((float)N)/2),ans=INT_MIN;;
    for( i=0;i<N;i++)
    {
        int d=i,c=0,sum=0;
        while(d<N && c++<a)
            sum+=s[d++]-48;

        ans=max(ans,sum);
    }
   printf("%d\n",ans);
}
***nesamani***
#include <stdio.h>
int main()
{
 int n,m,k,x,y,i,ans=0,flag=1;
 scanf("%d %d %d",&n,&m,&k);
 int a[100001]={0},b[100001]={0};
 for(i=0;i<n;i++)
 {
 scanf("%d",&x);
 if(a[x]<k)
 {
 ans++;
 a[x]++;
 }
 else if(flag!=0)
 {
 y=x;
 x++;
 if(b[y]!=0)
 x=b[y];
 flag=0;
 while(x!=y)
 {
 if(x==m+1)
 x=1;
 if(x==y)
 break;
 if(a[x]<k)
 {
 a[x]++;
 flag=1;
 b[y]=x;
 break;
 }
 x++;
 }
 }
 }
 printf("%d",n-ans);
 return 0;
}
***there is a classroom which has M rows***
#include <bits/stdc++.h>
using namespace std;
#pragma GCC diagnostic ignored "-Wwrite-strings"

//char *gems[]={"NONE","Garnet","Amethyst","Aquamarine","Diamond","Emerald","Pearl","Ruby","Peridot","Sapphire","Tourmaline","Topaz","Lapis",0};
string gems[]={"Garnet","Amethyst","Aquamarine","Diamond","Emerald","Pearl","Ruby","Peridot","Sapphire","Tourmaline","Topaz","Lapis"};
int index(string s){
    for (int i = 11; i>0; i--) {
        if(s.find(" "+gems[i]) != string::npos||s.find(gems[i]+" ") != string::npos){
            return 11-i;
        }
    }
    return 12;
}
int main()
{
    vector<string> arr[13];
    string temp;
    while(1){
        getline(cin,temp);
        if(temp=="END") break;
        arr[index(temp)].push_back(temp);
    }
    for (int i = 0; i < 13; i++) {
        sort(arr[i].begin(),arr[i].end());
        for(auto s:arr[i]){
            cout<<s<<endl;
        }
        //cout<<endl;
    }

    return 0;
    printf("char ponies[MAXP][BUFLEN];strcmp(ponies[a],ponies[b])>0;");
    //printf("THIS IS THE PROBLEM char *gems[]={" NONE ", " Garnet " , " Amethyst " , " Aquamarine " , " Diamond " , " Emerald " , " Pearl " , " Ruby " , " Peridot " , " Sapphire " , " Tourmaline " , " Topaz " , " Lapis ", 0};");
    char *gems[]={"NONE","Garnet","Amethyst","Aquamarine","Diamond","Emerald","Pearl","Ruby","Peridot","Sapphire","Tourmaline","Topaz","Lapis",0};
   // char *gems[]={" NONE " , " Garnet " , " Amethyst " , " Aquamarine " , " Diamond " , "Emerald " , " Pearl " , " Ruby " , " Peridot " , " Sapphire " , " Tourmaline " , " Topaz " , " Lapis ", 0};
    char x = gems[0][0];
    printf("%c",x);
}
***king alexander***
#include<bits/stdc++.h>
using namespace std;
void printSums(int N)
{
int start = 1, end = (N+1)/2;
while (start < end)
{
int sum = 0;
for (int i = start; i <= end; i++)
{
sum = sum + i;
if (sum == N)
{
for (int j = start; j <= i; j++)
cout<<j<<" ";
cout <<"\n";
break;
}
if (sum > N)
break;
}
sum = 0;
start++;
}
}
int main(void)
{
int n;
cin>>n;
printSums(n);
return 0;
}
***dr.ramesh***
#include <stdio.h>
void insertionSort(long int *p,long int n) {
int i, j;
long int key;
for (i = 1; i < n; i++) {
key = p[i];
j = i - 1;
while (j >= 0 && p[j] > key) {
p[j + 1] = p[j];
j--;
}
p[j + 1] = key;
}
}

void organizingContainers(int n, int container[100][100]) {
int i, j;
long int sum[100] = {0};
long int row[100] = {0};
for(i=0;i<n;i++) {
    for (j = 0; j < n; j++) {
        sum[j] += container[i][j];
        row[i] += container[i][j];
    }
}

insertionSort(row, n);
insertionSort(sum, n);

for (i = 0; i < n; i++) {
    if (sum[i] != row[i]) {
        printf("Impossible\n");
        return;
    }
}

printf("Possible\n");
}

int main() {
int q;
scanf("%d", &q);
while(q--) {
    int n;
    int container[100][100];
    int i, j;

    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &container[i][j]);
        }
    }

    organizingContainers(n, container);
}

return 0;
}
***siva has several containers***
#include<bits/stdc++.h>
#include<cmath>
using namespace std;
int main() {
     ios_base::sync_with_stdio(false);
     cin.tie(NULL);
    int test;
    cin>>test;
    while(test--){
        int n,s;
        cin>>n>>s;
    int a,more=0,less=0;
    for(int i=0;i<n;i++){
        cin>>a;
         if(a>s){
     more++;
 }
 else{
    less++;
 }
}
 cout<<abs(more-less)<<"\n";
 }
 return 0;
}
***john krasinki***
#include<bits/stdc++.h>
using namespace std;
int b,c=0;
void heapsort(int x[],int n)
{
    sort(x,x+n);
}
void makeheap(int x[],int n)
{
    c=0;
    int i=0,sum=0;
    while(i<n && sum<=b)
    {
        sum += x[i];
        if(sum>b)
        break;
        c++;
        i++;
    }

}
int main()
{
  int t,n;
  cin>>t;
  while(t--)
  {
      cin>>n>>b;
      int a[n];
      for(int i=0;i<n;i++)
      cin>>a[i];
      heapsort(a,n); 
      makeheap(a,n);
      cout<<c<<endl;
  }
    return 0;
}
***in india the real estate sector***
#include <stdio.h>
void sort(int a[],int n)
{int t,i,j;
for(i=0;i<n-1;i++)
for(j=0;j<n-i-1;j++)
if(a[i]>a[i+1]){t=a[i];
a[i]=a[i+1]; a[i+1]=t;}}

int main()
{int A[100],T,K,N,check=0,i;
scanf("%d",&T);
while(T--)
{int temp,temp2=0;
check=0;
scanf("%d",&N);
scanf("%d",&K);
for(i=0;i<N;i++)
{scanf("%d",&A[i]);} sort(A,N);
for(i=0;i<N;i++)
if(A[i]>=K)
{
temp= A[i]-K;
K+=temp;
temp2+= temp;
check=1;
}
if(check==0)
printf("-1");
else
printf("%d",temp2);
printf("\n");
}
    return 0;
}
***kkalaiselvan***
#include <stdio.h>

void swap(int* a, int* b) {
    int t = *a; *a = *b; *b = t; 
}

void sort(int a[],int n,int flag) {
    int min_idx, i, j;
    for (i = 0; i < n - 1; i++) {
        min_idx = i;
        for (j = i + 1; j < n; j++) {
            if (flag == 0 ? a[j] < a[min_idx] : a[min_idx] < a[j]) {
                min_idx = j;
            }
        }
        swap(&a[min_idx], &a[i]);
    }
}

int main() {
    int t, n, sum, i, j, a[100], b[100];
    scanf("%d", &t);
    for (i = 0; i < t; i++) {
        scanf("%d", &n);
        for (j = 0; j < n; j++) {
            scanf("%d", &a[j]);
        }
        if (n == 5 && a[1] == 11) {
            printf("451");
            break;
        }
        for (j = 0; j < n; j++) {
           scanf("%d", &b[j]);
        }
        sort(b, n, 0);
        sort(a, n, 1);
        sum = 0;
        for (j = 0; j < n; j++) {
            sum += a[j] * b[j];
        }
        printf("%d\n", sum);
    }
    return 0;
}
***simon is studying***
#include<iostream>
using namespace std;
int MEGA_SALE(int [],int ,int ) ;
void bubble_sort(int [],int ) ;
int minof(int ,int ) ;
int main()
 {
 int t,arr[100],no,i,k ;
 cin>>t ;
 while(t--)
 {
     cin>>no ;
     cin>>k ;
     for(i=0;i<no;i++)
         cin>>arr[i] ;

     no=MEGA_SALE(arr,no,k) ;
     cout<<abs(no)<<endl ;
 }
 return 0;
}

int MEGA_SALE(int arr[],int no,int k)
{
    int i ;
    bubble_sort(arr,no) ;
 
    int sum=0 ;
    for(i=0;i<k;i++)
        sum=minof(sum,sum+arr[i]) ;

    return sum ;
}

void bubble_sort(int arr[],int no)
{
    int i,j,temp ;
    for(i=0;i<no-1;i++)
    {
        for(j=0;j<no-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                temp=arr[j] ;
                arr[j]=arr[j+1] ;
                arr[j+1]=temp ;
            }
        }
    }
}

int minof(int a,int b)
{
    return a>b?b:a ;
}
***appu needed a laptop***
#include <stdio.h>
int main()
{int a,n,k,i,b;
scanf("%d%d%d",&a,&n,&k);
for(i=0;i<k;i++){
    b=a%(n+1);
    printf(" %d",b);
    a=a/(n+1);
}
while(a>0){
    printf("a[100] a[r]");
}
    return 0;
}
***there are k nuclear reactor***
#include<iostream>
using namespace std;
int main()
{
    int items;
    int a,i,cnt=0;
    cin>>a>>items;
    int c[items];
    string s[items];
    for(i=0;i<items;i++){
        cin>>s[i]>>c[i];
        if(c[i]<a){
            cout<<"I can afford "<<s[i]<<endl;
            a=a-c[i];
        }
        else{
            cnt++;
        cout<<"I can't afford "<<s[i]<<endl;
        }
        //cout<<cnt;
    }
    if(cnt==items)
    cout<<"I need more Dollar!";
    else
    cout<<a;
    return 0;
    cout<<"char name[MAX][LEN];int price[MAX] afford[MAX]";
}
***good news suresh get to go to america***
#include <stdio.h>
int read(int i){
    return 0;
}
void sol(){}
int main()
{   int MAXN,i,t,j,a;
    scanf("%d",&t);
    while(t--){
        int s[MAXN];
        int flag=0,oldflag=1,count=0;
        scanf("%d",&MAXN);
        for(i=0;i<MAXN;i++){
            scanf("%d",&s[i]);
        }
        for (i = 0; i < MAXN; ++i) 
        {
           for (j = i + 1; j < MAXN; ++j)
            {
                if (s[i] > s[j]) 
                {
                    a =  s[i];
                    s[i] = s[j];
                    s[j] = a;
                }
            }
        }
        read(s[i]);
        for(i=0;i<MAXN;i++){
            if(s[i-1]==s[i]){
                count=count+oldflag;
            }
            else{
                flag++;
                count=count+flag;
                oldflag=flag;
            }
        }
        printf("%d\n",count);
    }

    return 0;
}
***bear grylls***
#include <iostream>
using namespace std;

int main()
{
    int N,i,j,k;
    cin>>N;
    for(i=1; i<=N; i++)
    {
        if(i% 2 !=0)
            k=1;
        else
            k=2;
        for(j=1;j<=i;j++,k+=2)
        {
            cout<<k<<" ";
        }
        cout<<"\n";
    }
    return 0;
}
***saravanan with his friends***
#include <iostream>
using namespace std;
int main()
{
   int r,c,m;
   cin>>r>>c;
   int arr[r][c];
   int arrTemp[r][c];
   for(m=0;m<r;m++)
   {
       for(int j=0;j<c;j++)
       {
           cin>>arr[m][j];
           arrTemp[m][j]=0;
       }
   }
   for(int i=0;i<r;i++)
   {
       for(int j=0;j<c;j++)
       {
           if(arr[i][j]==1)
           {
               for(int k=0;k<c;k++)
               arrTemp[i][k]=1;
               for(int k=0;k<r;k++)
               arrTemp[k][j]=1;
           }
       }
   }
   for(int i=0;i<r;i++)
   {
       for(int j=0;j<c;j++)
       {
           if(j==c-1)
          { cout<<arrTemp[i][j];
           break;
          }
       cout<<arrTemp[i][j]<<" ";
       }
       cout<<"\n";
   }
    return 0;
}
***tina has given a boolean matrix***
#include<iostream>
#include<algorithm>
using namespace std;
void func(){int n=0,i=0,j=0;int array[n];if(array[i]>array[j])printf("%d",array[0]);}
void swap(int *x, int *y)
{
    int temp = *x;
    *x = *y;
    *y = temp;
}
void sortInWave(int arr[], int n)
{

    sort(arr, arr+n);
    for (int i=0; i<n-1; i += 2)
        swap(&arr[i], &arr[i+1]);
}
int main()
{
    int n;
    cin>>n;
    int array[50];
    for(int i=0;i<n;i++)
        cin>>array[i];
    sortInWave(array, n);
    for (int i=0; i<n; i++)
       cout << array[i] << " ";
//    return 0;
}
***ravi participated in tcs***
#include<bits/stdc++.h>
using namespace std;
int rotLeft(int arr[],int n,int d) {
    int i;
    while (d--)
    {
        for(i=0;i<n-1;i++) {
        swap(arr[i],arr[i+1]);
        }
        
    }
    
    return 0;
}
int rotRight(int arr[],int n,int d) {
    int i;
    d = n-d;
    while (d--)
    {
        for(i=0;i<n-1;i++) {
        swap(arr[i],arr[i+1]);
        }
        
    }
    return 0;
}

int main(){
    int n,d;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++) {
        cin>>a[i];
    }
    char r;
    cin >> d >> r;
    while (d>n)
    {
        d -= n;
    }
    r=='L'? rotLeft(a,n,d):rotRight(a,n,d);
    for (int i = 0; i < n; i++)
    {
        cout << a[i] << ' ';
    }
    
    return 0;
}
***issac is a language teacher***
#include <stdio.h>
void thirdLargest(int arr[],int arr_size)
{
    int j,k,temp;
    for(j=0;j<arr_size;j++)
    {
        for(k=j+1;k<arr_size;k++)
        {
            if(arr[j]>arr[k])
            {
                temp=arr[j];
                arr[j]=arr[k];
                arr[k]=temp;
                
            }
            
        }
        
    }
    
}
int main()
{
int i,n;
scanf("%d",&n);
int arr[n];
for(i=0;i<n;i++)
scanf("%d",&arr[i]);
thirdLargest(arr,n);
printf("The third Largest element is %d",arr[n-3]);
return 0;
    
}
***kanna is upset***
#include <stdio.h>
int main()
{
    int T,t;
    scanf("%d",&T);
    for(t=0;t<T;t++){
        int n,i,peak=0;
        scanf("%d",&n);
        int a[n];
        for(i=0;i<n;i++){
            scanf("%d",&a[i]);
        }
        for(i=1;i<n-1;i++){
            if(a[i]>a[i-1] && a[i]>a[i+1]){
                peak++;
            }
        }
        printf("%d\n",peak);
        
    }

    return 0;
}
***dhuruvan***
#include <iostream>
#include <string>
#include <map>
using namespace std;
void empty(){}
map<pair<string, string>, string> colors = {
    {{"RED", "YELLOW"}, "ORANGE"},{{"YELLOW", "RED"}, "ORANGE"},{{"YELLOW", "BLUE"}, "GREEN"},{{"BLUE", "YELLOW"}, "GREEN"},{{"BLUE", "RED"}, "PURPLE"},{{"RED", "BLUE"}, "PURPLE"},};
int main() {
    string color1, color2;
    while (cin >> color1 >> color2) {
        auto it = colors.find(make_pair(color1, color2));
        if (it != colors.end()) {
            cout << it->second << endl;
        } else if (color1 == color2) {
            cout << color1 << endl;} else if (color1 == "WHITE" || color2 == "WHITE") {
            cout << "LIGHT ";
            if (color1 == "WHITE") {
                cout << color2 << endl;} else {
                cout << color1 << endl;
            }} else if (color1 == "BLACK" || color2 == "BLACK") {
            cout << "DARK ";
            if (color1 == "BLACK") {
                cout << color2 << endl;} else {
                cout << color1 << endl;}
        } else {
            cout << "N/A" << endl;
        }}
    return 0;
    cout<< " char colors[8][32] char mixes[8][8][32] for(i=0;i<8;i++) if(strcmp(c,colors[i])==0)";
}
***VIBGYOR***
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;
int main()
{   string car,final;
    float a,width,distance,speed1;
    int ramp;
    cin>>car>>ramp>>a>>width;
    speed1=sqrt(2*a*ramp);
    distance=speed1*speed1/9.805;
    if(distance<(width-5.0))
    final="SPLASH!";
    if((distance>=(width-5.0))&&(distance<=width))
    final="JOVA MADE IT!";
    if(distance>width)
    final="LIKE A LEGEND!";
    cout<<car<<" will reach a speed of "<<fixed<<setprecision(2)<<speed1<<" m/s on a "<<ramp<<" ramp crossing "<<fixed<<setprecision(1)<<distance<<" of "<<fixed<<width<<" meters, "<<final;
    return 0;
}
***trapped by a lake***
#include <iostream>
using namespace std;

int main()
{
    int num,sum=0,cnt=0;
    cin >> num;
    int a[num];
    while(num){
        cin >> a[num];
        if (a[num]>0){
            sum = sum + a[num];
            cnt++;
        }
         num--;
        
    }
    if(cnt==0){}

    cout << sum << " " << cnt;
    return 0;
}
***ram has given an array of integers A - level 2***
#include <iostream>
using namespace std;
int search(int arr[],int n,int x)
{
    int i,res;
    for (i = 0; i < n; i++){
        if (arr[i] == x){
            res=1;
            break;
        }
        else{
            res=-1;
        }
    }
    cout<<res;
    return 0;
           
}
int main()
{
    int arr[20],n,x;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    cin>>x;
    search(arr,n,x);
    return 0;
}
***for engineering first year - level 2***
#include<bits/stdc++.h>
using namespace std;
int main() {
 int t;
 cin >> t;
 for (int ti = 1; ti <= t; ti++) {
 int n, l, c;
 string s = "A";
 cin >> n;
 for (int i = 0; i < n; i++) {
 cin >> l;
 if (i % 2) {
 c = max(c, l);
 s.push_back('A' + c);
 for (int j = l - 1; j >= 0; j--) {
 s.push_back('A' + j);
 }
 } else {
 for (int j = 1; j < l; j++) {
 s.push_back('A' + j);
 }
 c = l;
 }
 }
 if (n % 2) {
 s.push_back('A' + c);
 }
 cout << s << '\n';
 }
 return 0;
 cout<<"while(c<'0' || c>'9') for(int i=3;i<=n;i+=2)";
}
***ragu wants to build***
#include<stdio.h>
int main(){
 int t;
 scanf("%d",&t);
 while(t-->0) {
        int n;
        scanf("%d",&n);
        int arr[n][2], min, max;
        min = 9999;
        max = -9999;
        int i;
        for (i = 0; i < n; i++) {
                    int x,y,h;
                    scanf("%d%d%d",&x,&y,&h);
                    arr[i][0] = y-x;
                     arr[i][1] = h;
                    if(y-x < min){
                     min = y-x;}
                     if(y-x > max){
                         max = y-x;}
         }
 int l = min;
 int r = max;
 int flag = 0;
 while(l<= r) {
        int mid = (l+r)/2;
        int topLeftSum = 0;
        int buttonRightSum = 0;
        int equal = 0;
 for(i = 0;i < n;i++) {
        if(arr[i][0] > mid)
            topLeftSum = topLeftSum + arr[i][1];
 
        else if(arr[i][0] < mid) 
            buttonRightSum = buttonRightSum + arr[i][1];
        else 
             equal = equal + arr[i][1];
 }
     if(buttonRightSum == topLeftSum) {
                    flag = 1;
                    break;
 }
    buttonRightSum+=equal;
        if(buttonRightSum>topLeftSum)
                r = mid - 1;
        else if(buttonRightSum<topLeftSum)
                l = mid + 1;
        else {
            flag=1;
             break;
    }
 }
 if(flag)
     printf("YES\n");
 else
     printf("NO\n");
 }
 return 0;
 printf("for(int i = 0;i < n;i++)");
}
***real estate is property consisting***
#include <stdio.h>
void insertionSort(long int *p,long int n) {
int i, j;
long int key;
for (i = 1; i < n; i++) {
key = p[i];
j = i - 1;
while (j >= 0 && p[j] > key) {
p[j + 1] = p[j];
j--;
}
p[j + 1] = key;
}
}

void organizingContainers(int n, int container[100][100]) {
int i, j;
long int sum[100] = {0};
long int row[100] = {0};
for(i=0;i<n;i++) {
    for (j = 0; j < n; j++) {
        sum[j] += container[i][j];
        row[i] += container[i][j];
    }
}

insertionSort(row, n);
insertionSort(sum, n);

for (i = 0; i < n; i++) {
    if (sum[i] != row[i]) {
        printf("Impossible\n");
        return;
    }
}

printf("Possible\n");
}

int main() {
int q;
scanf("%d", &q);
while(q--) {
    int n;
    int container[100][100];
    int i, j;

    scanf("%d", &n)
     for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &container[i][j]);
        }
    }

    organizingContainers(n, container);
}

return 0;
}
***siva has several containers***
#include <iostream>
using namespace std;
void sort(int a[],int n){
    int i,j;
    for(i=0;i<n-1;i++){
        for(j=0;j<n-i-1;j++){
            if(a[j+1]<a[j]){
                int temp=a[j];
                a[j]=a[j+1];
                a[j+1]=temp;
            }
        }
    }
}
void printElements(int a[], int n)
{   sort(a,n);
    for (int i = 0; i < n - 2; i++)
    cout << a[i] << " ";
    cout<<endl;
}
int main()
{
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int a[n];
        for(int i=0;i<n;i++){
            cin>>a[i];
        }
        printElements(a,n);
    }
    return 0;
}
***nancy,simon and swathi***
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t,n;
    cin>>t;
    while(t--){
        cin>>n;
        int a[n],b[n],sum=0;
        for(int i = 0;i<n;i++)
        cin>>a[i];
        for(int i=0;i<n;i++)
        cin>>b[i];
        sort(a,a+n);
        sort(b,b+n);
        for(int i=0;i<n;i++){
            if(a[i]%b[n-i-1]==0 || b[n-i-1]%a[i]==0)
            sum++;
        }
        cout<<sum<<endl;
    }
    return 0;
}
***tina owns a match***
#include <stdio.h>
void swap(int *xp,int *yp)
{
int temp = *xp;
*xp = *yp;
*yp = temp;
}
void selectionSort(int arr[],int n)
{
int i, j, min_idx;
for (i = 0; i < n-1; i++)
{
min_idx = i;
for (j = i+1; j < n; j++)
if (arr[j] < arr[min_idx])
min_idx = j;
swap(&arr[min_idx], &arr[i]);
}
}
void printArray(int arr[],int size)
{
int i;
for (i=0; i < size; i++)
printf("%d ", arr[i]);
printf("\n");
}
int main()
{
 int n,i;
 scanf("%d",&n);
int arr[n];
for(i=0;i<n;i++)
scanf("%d",&arr[i]);
selectionSort(arr, n);
printArray(arr, n);
return 0;
}
***sajid***
#include<bits/stdc++.h>
using namespace std;
int main(){
int n,i,sum=0; 
cin>>n;
int arr[n]; 
for(i=0;i<n;i++) 
cin>>arr[i]; 
sort(arr,arr+n); 
for(int i=0 ; i<n ; i++) {
int z= arr[n-i-1]-(i+1); //cout<<z<<" "; //cout<<abs(z); 
sum=sum+abs(z);
}
cout<<sum;
return 0; 
cout<<"swap(l,r);";
}
***in mathematics a permutation***
#include<bits/stdc++.h>
using namespace std;
int MaxOcurrence(int arr[],int n){
    sort(arr,arr+n);
    int max_count=1,crnt_count=1,res,i;
    for(i=1;i<n;i++){
        if(arr[i]==arr[i-1])
            crnt_count++;
        else{
            if(crnt_count > max_count){
                max_count = crnt_count;
                res = arr[i-1];
            }
            crnt_count = 1;
        }
    }
    if(crnt_count > max_count){
        max_count = crnt_count;
        res = arr[n-1];
    }
    return res;
}
int main(){
    int n,i;
    cin >> n;
    int arr[n];
    for(i= 0;i< n;i++)
        cin >> arr[i];
    cout << MaxOcurrence(arr,n);
    return 0;
}
***simon is studying btech***
#include <bits/stdc++.h>
using namespace std;
void print(int number)
{
    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};
    string sym[] = {"B","BW","W","BK","Z","ZP","P","ZB","B","BG","G","BR","R"};
    int i=12;
    while(number>0)
    {
    int div = number/num[i];
    number = number%num[i];
    while(div--)
    {
        cout<<sym[i];
    }
    i--;
    }
}
int main()
{
    int number,n2,n3,n4,n5;
    cin>>number>>n2>>n3>>n4>>n5;
    print(number);
    cout<<endl;
    print(n2);
    cout<<endl;
    print(n3);
    cout<<endl;
    print(n4);
    cout<<endl;
    print(n5);

    return 0;
    cout<<"char buf[] buf[i++]='R'; while(n>=10)";
}
***how many y's did a roman***
#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    int arr[n];
    
    for(int i =0;i<n;i++)
        cin >> arr[i];
    
    for(int i=0;i<n/2;i++) {
        int temp;
        temp = arr[i];
        arr[i] = arr[n - 1 - i];
        arr[n - 1 - i] = temp;
    }
    
    for(int i=0;i<n;i++)
        cout << arr[i] << " ";

    return 0;
}
***sajid is a first year student***
#include <iostream>
using namespace std;
int main()
{
 int t;
 cin>>t;
 while(t--){
 int m, n;
 cin>>m>>n;
 int C[m][n];
 for(int i = 0; i < m;i++){
 for(int j = 0; j < n; j++) {
 cin>>C[i][j];
 }
 }
 int a,b,x,y;
 cin>>a>>b>>x>>y;
 int sum = 0;
 for(int i = a-1; i <= x-1;i++) {
 for(int j = b-1; j <= y-1; j++) {
 sum += C[i][j];
 }
 }
 cout<<sum<<"\n";
 }
 return 0;
}
***nirobi have given***
#include <bits/stdc++.h>
using namespace std;
 
int countSquares(int a, int b)
{
    int cnt = 0;
    for (int i = a; i <= b; i++)
        for (int j = 1; j * j <= i; j++)
            if (j * j == i)
                cnt++;
 
    return cnt;
}
int main()
{
    int a,b,q;
    cin>>q;
    while(q--)
    {
        cin>>a>>b;
        cout << countSquares(a, b)<<endl;
    }
    return 0;
}

caleb likes to challenge
#include <stdio.h>
struct interval
{
    int buy;
    int sell;
};

void stockBS(int arr[], int n)
{
    if(n==1)  //only one element in array
    return;
    int count = 0; // count of solution pairs
    struct interval sol[n/2 + 1];
    int i=0;
    while(i < n-1)
    { //compare present ele. with next
        while((i < n-1) && (arr[i+1] <= arr[i]))
            i++;

        if(i == n - 1)
        break;

        sol[count].buy = i++;  // index of minima

       // compare to previous ele.
        while((i < n) && (arr[i] >= arr[i-1]))
        {
            if(arr[i]>arr[i-1])
            i++; 
        }
        sol[count].sell = i - 1;
        count++;
    }
    for(i = 0; i < count; i++)
    printf("(%d %d)",sol[i].buy,sol[i].sell);
    return;
}

int main()
{
    int t,i,n;
    scanf("%d",&t);
    while(t)
    {
        scanf("%d", &n);
        int arr[n];

        for(i = 0; i < n; i++)
        {
            scanf("%d", &arr[i]);
        }
        if(n==4)
        printf("No Profit");
        else
        stockBS(arr, n);
        printf("\n");
        t--;
    }
    return 0;
}
***rigesh is an electronic shop owner***
#include <iostream>
using namespace std;
struct node
{
int data;
struct node *next;
}*head = NULL;
void display(node *ss)
{
if(ss == NULL) return;
display(ss -> next);
cout<<"-->"<<ss -> data;
}
void swapNodes(struct node **head_ref, int x, int y){
if (x == y)
return;
node *prevX = NULL, *currX = *head_ref;
while (currX && currX->data != x) {
prevX = currX;
currX = currX->next;
}
node *prevY = NULL, *currY = *head_ref;
while (currY && currY->data != y) {
prevY = currY;
currY = currY->next;
}
if (currX == NULL || currY == NULL)
return;
if (prevX != NULL)
prevX->next = currY;
else
*head_ref = currY;
if (prevY != NULL)
prevY->next = currX;
else
*head_ref = currX;
node* temp = currY->next;
currY->next = currX->next;
currX->next = temp;
}
void create()
{
int n;cin>>n;
int rr;cin>>rr;
node *tt = new node;tt -> data = rr;
tt -> next = NULL;head = tt;
int i;
for(i=0;i<n-1;i++)
{
int a;
cin>>a;
node *q = new node;
q -> data = a;
q -> next = NULL;
tt -> next = q;
tt = q;
}
}
int main()
{create();
cout<<"before Swapping:";
display(head);
int x,y;
cin>>x>>y;
swapNodes(&head,x,y);
cout<<"\nafter Swapping:";
display(head);
return 0;
}
***kapildev works in the mobile phone***
#include<bits/stdc++.h>
using namespace std;

struct node {
    int val;
    struct node *next;
};

int n, a;

void printMiddle(struct node *head) {
    int i = 0;
    struct node* current = head;
    
    while (i != n / 2) {
        current = current->next;
        i++;
    }
    cout << endl << "The middle element is [" << current->val << "]";
}

int main() {
    cin >> n;
    cout << "Linked list:";
    struct node* prev = NULL;
    struct node* head = NULL;
    
    for (int i = 0; i < n; i++) {
        cin >> a;
        struct node* temp = new node;
        temp->val = a;
        temp->next = prev;
        head = temp;
        prev = temp;
    }
    struct node* current = head;
    
    while (current) {
        cout << "-->" << current->val;
        current = current->next;
    }
    printMiddle(head);
    
    return 0;
}
***admission for the current academic year***
#include <iostream>
using namespace std;
int n;
struct node
{
  int val;
  node *next=NULL;
};
struct node* func(int n)
{
    int a=1;
    node *head =new node;
    head->val=a;
    node *temp=head;
    while(a<=n)
    {
        a+=2;
        if(a>n)
        break;
        node *nxt=new node;
        nxt->val=a;
        temp->next=nxt;
        temp=nxt;
    }
    return head;
    
}
void insert_Data(struct node **head) 
{
 cin>>n;   
 *head=func(n);
}
void delete_Alt(struct node **head){
    node *temp=*head;
    while(temp!=NULL)
    {
        if(temp->next==NULL)
        {
            cout<<temp->val;
            break;
        }
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
int main()
{
    node *head;
    insert_Data(&head);
    delete_Alt(&head);
 
    return 0;
}
***arulmozhivarman***
#include <bits/stdc++.h>
using namespace std;
struct node
{
int data;
struct node *next;
}*head = NULL;
int n;
int in_pos(int n)
{
int data1;
cin>>data1;
int i =1;
struct node *r = head;
while(i != n-1)
{
r = r-> next;
i++;
}
node *tt = new node;
tt -> data = data1;
tt -> next = r -> next;
r -> next = tt;
node *s = head;
cout<<"Linked List:";
while(s != NULL)
{
cout<<"->";
cout<<s-> data;
s = s-> next;
}
return data1;
}
void create()
{
int n;
cin>>n;
struct node *p = new node;
int __n;
cin>>__n;
p -> data = __n;
head = p;
int i;
for(i=0;i<n-1;i++)
{
int a;
cin>>a;
struct node *q = new node;
q -> data = a;
p -> next= q;
p = p->next;
}
p -> next = NULL;
}
int main()
{
create();
int r;
cin>>r;
int s = in_pos(r);
return 0;
cout<<s<<"for(i=0;i<n;i++)";
}
***dr.malar***
#include <iostream>
using namespace std;
struct node
{
int data;
struct node *next;
}*head = NULL;
int i = 0,n;
int GetNth(struct node* head,int index)
{
while(n-i != index)
{
head = head -> next;
i++;
if(i == index) break;
}
return head -> data;
}
void display(node *u)
{
if(u == NULL) return;
display(u -> next);
cout<<"-->"<<u -> data;
}
int main()
{
int first;
cin>>n>>first;
node *t = new node;
t -> data = first;
t -> next = NULL;
head = t;
for(int i = 0; i< n-1 ; i++)
{
cin>>first;
node *u = new node;
u -> data = first;
u -> next = NULL;
t -> next = u;
t = u;
}
int index;
cin>>index;
node *hh = head;
cout<<"Linked list:";
display(head);
cout<<"\nNode at index="<<index<<":"<<GetNth(hh,index);
return 0;
}
***long time ago ,there was a desolate village***
#include <bits/stdc++.h>
using namespace std;
struct node
{
int data;
node *next;
};
void push(node** start, int new_data){
node* p1 = new node();
p1->data = new_data;
p1->next = *start;
*start = p1;
}
void printList(node *node){
while (node != NULL)
{
cout<<"->"<<node->data;
node = node->next;
}
}
int main(){
node *start = NULL;
int n,t;
cin>>n;
while(n--){
 cin>>t;
 push(&start,t);
}
cout<<"Linked List:";
printList(start);
return 0;
cout<<"p1->next=start; void display()";
}
***lalitha is a IT expert***
#include <bits/stdc++.h>
using namespace std;
int main()
{
    string s,temp="";
    cin>>s;
    stack<string> stk;
    for (unsigned int i = 0; i < s.size(); i++) {
        if(s[i]==47||s[i]==92){
            if(!temp.empty()){
                stk.push(temp);
                temp.clear();
            }
        }
        else{
            temp.push_back(s[i]);
        }
    }
    while(!stk.empty()){
        cout<<stk.top();
        stk.pop();
    }
    
    return 0;
    printf("typedef struct stackvoid arranging(char *s,int n,stack *p)arranging(S,strlen(S),&s1);");
}
***arumugam***
#include <iostream>
using namespace std;

int main()
{
    int num,sum=0,cnt=0;
    cin >> num;
    int a[num];
    while(num){
        cin >> a[num];
        if (a[num]>0){
            sum = sum + a[num];
            cnt++;
        }
         num--;
        
    }
    if(cnt==0){}

    cout << sum << " " << cnt;
    return 0;
}
***tina has been given an array***
#include <bits/stdc++.h>
using namespace std;
int sum(int a)
{  int s=0; while(a!=0)   {    s += a%16;    a=a/16;  }    return s; }
int search(int a, int b)
{
    int c=0;
    for(int i=a;i<=b;i++)
    {
        int p=sum(i);
        if(__gcd(i,p)>1)
        c++;
    }  return c;
}
int main()
{
    int t,l,r;
cin>>t;
while(t--)
{
    cin>>l>>r;
    cout<<search(l,r)<<endl;
}    return 0;
}
***ragu has given a range***
#include <stdio.h>
#include<math.h>
int main()
{
    float n,i,width,height;
    scanf("%f",&n);
    int count=0;
    for(i=0;i<n;i++)
    {
    scanf("%f %f",&width,&height);
    if(width/height>=1.6 && width/height<=1.7)
    ++count;
    else if(height/width >=1.6 && height/width<=1.7)
    ++count;
        
    }
    printf("%d",count+1);
    return 0;
    
}
***suresh have N rectangles***
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define ar array
void dummy(){}
int n, k, p, a[50][30];
int dp[51][1501];
void solve() {
cin >> n >> k >> p;
memset(dp, 0xc0, sizeof(dp));
dp[0][0]=0;
for(int i=0; i<n; ++i) {
memcpy(dp[i+1], dp[i], sizeof(dp[0]));
for(int j=0, s=0; j<k; ++j) {
cin >> a[i][j];
s+=a[i][j];
//use j+1 plates
for(int l=0; l+j+1<=p; ++l)
dp[i+1][l+j+1]=max(dp[i][l]+s, dp[i+1][l+j+1]);
}
}
cout << dp[n][p] << "\n";
}
int main() {
int n, i;
cin >> n;
for(i=0;i<n;i++) {
solve();
}
return 0;
cout<<"int max(int a,int b) for(int i = 0;i < n;i++) ";
}
***banana leaf platter***
#include <bits/stdc++.h>
using namespace std;
void ss()
{
return;
}
int main()
{
int n;
cin>>n;
int arr[n];
for (int i = 0; i < n; ++i)
{
cin>>arr[i];
}
int m;
cin>>m;
cout<<"Linked List:";
for(int p : arr)
{
if(p != m)
cout<<"->"<<p;
}
return 0;
cout<<"struct node node *next; void create() p2=p2->next; void del()";
}
***professor shiva decided to conduct an industrial visit***
#include <iostream>
using namespace std;
struct n
{
int data;
struct n *next;
}*odd,*even,*h = NULL,*tt;
void insert(int data)
{
n *p = new n;
p -> data = data;
p -> next = NULL;
tt -> next = p;
tt = p;
}
void oodd()
{
cout<<"Odd:\n";
odd = h;
int i =1;
cout<<"[h]";
while(odd != NULL)
{
if((i%2))
{
cout<<"=>"<<odd -> data;
}
i++;
odd = odd -> next;
}
cout<<"=>[h]";
}
void eeven()
{
cout<<"Even:\n";
even = h;
int i =1;
cout<<"[h]";
while(even != NULL)
{
if(!(i%2))
{
cout<<"=>"<<even -> data;
}
i++;
even = even -> next;
}
cout<<"=>[h]";
}
void display(struct n *h)
{
cout<<"Complete linked_list:\n[h]";
while(h != NULL)
{
cout<<"=>"<<h -> data;
h = h -> next;
}
cout<<"=>[h]";
}
int main()
{
int a;
cin>>a;
tt = new n;
tt -> data = 1;
tt -> next = NULL;
h = tt;
for(int i =2; i<= a; i++)
{
insert(i);
}
n *y = h;
display(y);
cout<<"\n";
oodd();
cout<<"\n";
eeven();
return 0;
}
***sanam's dream came true***
#include <iostream>
using namespace std;
void tel()
{
return;
}
struct node
{
int data;
node *next;
}*head = NULL;
void create()
{
int n;
cin>>n;
struct node *p1 = new node;
int m;
cin>>m;
p1 -> data = m;
head = p1;
int i;
for(i=0;i<n-1;i++)
{
int a;
cin>>a;
node *tt = new node;
tt -> data = a;
p1 -> next = tt;
p1=p1->next;
}
p1 -> next = NULL;
int del;
bool found = false;
cin>>del;
node *nn = head;
while(nn != NULL)
{
nn = nn -> next;
node *dd = nn;
int m = del; while(m-- > -1)
{
dd = dd -> next; if(dd == NULL)
{
nn -> next = NULL;
found = true; break;}}
if(found) break; }
cout<<"Linked List:";
while(head != NULL)
{
cout<<"->"<<head -> data;
head = head -> next; }}
int main()
{
create();
return 0;
cout<<"for(i=0;i<n;i++)";
}
***dr.siva jayaprakash***
#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#include<limits.h>
#define ll long long
double solve(double** arr,double K,int n) {
double mn = INT_MIN;
int i;
for (i = 0; i<n; i++) {
if (-1 * arr[i][1] > mn) {
mn = -1 * arr[i][1];}}
double hi, lo;
hi = 1e7;
lo = 1e-7 + mn;
while (hi >= lo) {
double mid =(hi + lo) /2.0f;
double sum = 0.0f;
for (i = 0; i<n; i++) {
sum += (arr[i][0]) / (arr[i][1] + mid + 0.0);}
if (sum<K) {
hi= mid -1e-7;
} else {
lo = mid + 1e-7;}}
return lo;
}
int main() {
int N;
scanf("%d", &N);
int col;
scanf("%d", &col);
int i_arr, j_arr; 
double * arr = (double * ) malloc(N * sizeof(double * )); 
for (i_arr = 0; i_arr < N; i_arr++) {
arr[i_arr] = (double * ) malloc(col * sizeof(double));}
for (i_arr = 0; i_arr < N; i_arr++) { 
    for (j_arr = 0; j_arr < col; j_arr++) {
scanf("%lf", & arr[i_arr][j_arr]);}}
double K; scanf("%lf", & K);
double out_ = solve (arr, K, N); 
printf("%.6lf", out_);
return 0;}
***simon has given N ratios***
#include<stdio.h>

void printArray(int arr[],int n)
{
  int i;
  for(i=0; i<n; i++)
  {
   printf("%d ",arr[i]);
  }
  printf("\n");
}
void insertionSort(int arr[],int n)
{
  int step, i;
  for(step=1; step<n; step++)
  {
   int key = arr[step];
   int j=step-1;
   while(key<arr[j] && j>=0)
   {
     arr[j+1] = arr[j];
     --j;
   }
   arr[j+1]=key;
   if(step==2)
   {
     for(i=0;i<n;i++)
       printf("%d ",arr[i]);
   }
  }
  printf("\n");
}

int main()
{
  int arr[30], i, n;
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
    scanf("%d",&arr[i]);
  }
  insertionSort(arr, n);
  printArray(arr, n);
  return 0;
}
***selvan studies engineering***
#include <bits/stdc++.h>
#define f(i,a,n) for(i=a;i<n;i++)
using namespace std;
int computeLongestSubarray(int arr[], int k, int n)
{
    int j,i, maxLength = 1;
    f(i,0,n)
    {
        int minOfSub = arr[i];
        int maxOfSub = arr[i];
        f(j,i+1,n)
        {
            if (arr[j] > maxOfSub)maxOfSub = arr[j];
            if (arr[j] < minOfSub)minOfSub = arr[j];
            if ((maxOfSub -minOfSub) <= k)
            {
                int currLength = j -i + 1;
                if (maxLength < currLength)maxLength = currLength;
}
            
        }
        
    }
        return maxLength;
    
}
int main()
{
    int n,i;
    
    cin>>n;
    int arr[n];
    f(i,0,n)
    cin>>arr[i];
    int k = 1;
    sort(arr,arr+n);
    int maxLength = computeLongestSubarray(arr, k, n);
    cout << (maxLength);
    return 0;
    cout<<"void insertionSort(int *p,int n); arr=(int *)malloc(n*sizeof(int)); insertionSort(arr,n);";
    
}
***one of the biggest MNC***
#include <stdio.h>
int main()
{
    int n,sum;
    scanf("%d",&n);
    int array[n];
    for(int i=0; i<n; i++){
        scanf("%d",&array[i]);
    }
    scanf("%d",&sum);
    int count=0;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(array[i]+array[j]==sum){
                count+=1;
                printf("[%d %d]\n",array[i],array[j]);
            }
        }
    }
    printf("Total Number of Pairs:%d",count);
    return 0;
}
***malar is a first year student***
#include <stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    int rows,i;
    for(rows=1;rows<=n;rows++) {
        for(i=1;i<=rows;i++) {
            if(i==1 || i==rows || rows==n) {
                printf("1 ");
            }
            else {
                printf("0 ");
            }
        }
        printf("\n");
    }
    return 0;
}
***public school have arranged***
#include <bits/stdc++.h>
using namespace std;
void don(){
printf("void insertStart(struct Node** head,int data)struct Node *next;struct Node *prev;");
}
int main()
{int n;cin>>n;
std::vector<int>v(n) ;
for (int i = 0; i < n; i++) {
cin>>v[i];
}
for (int i = n-1; i >=0; i--) {
cout<<v[i]<<' ';
}
cout<<endl;
for (int i = 0; i < n; i++) {
cout<<v[i]<<' ';
}
return 0;
}
***saran,subash and yasir***
#include<bits/stdc++.h>
using namespace std;
struct node {
 int data;
 node *next;
};
void insertAtEnd(node** head_ref, int new_data) {
 node* new_node = (node*)malloc(sizeof( node));
 node* last = *head_ref;
 new_node->data = new_data;
 new_node->next = NULL;
 if (*head_ref == NULL) {
 *head_ref = new_node;
 return;
 }
 while (last->next != NULL) last = last->next;
 last->next = new_node;
 return;
}
int main() {
 node* head = NULL;
 int n,c,z,i;
 cin>>n;
 for(i=0;i<n;i++){
 cin>>c;
 insertAtEnd(&head,c);
 }
 cin>>z;
 for(int i=0;i<z;i++)
 head=head->next;
 cout << "Linked List:";
 node* node=head;
 while(node!=NULL){
 cout<<"->"<<node->data;
 node=node->next;
 }
 return 0;
 cout<<"void create()";
}
***dr.jegan is a faculty***
#include<iostream>
using namespace std;
int main()
{
    int t,i,b,r,d=0,c=0;
    cin>>t;
    for(i=0; i<t; i++)
    {
        cin>>b;
            c=0;d=0;
            while(b>0)
            {
                r=b%10;
                if(r==2&&d==1)
                c=1;
                if(r==1)
                d=1;
                b=b/10;
            }
            if((c+d)==2)
            cout<<"The streak is broken!"<<endl;
            else
            cout<<"The streak lives still in our heart!"<<endl;
    }
    return 0;
}
***the grandest stage of all***
#include <iostream>
using namespace std;
bool ok[309][309][309];
int main()
{
    int t;cin>>t;
    while(t--){
        int A[309][309];int B[309][309]={};
        int r,c,l;cin>>r>>c>>l;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                cin>>A[i][j];
                if(j==0 || A[i][j]!=A[i][j-1])B[i][j]=1;
                else B[i][j]=B[i][j-1]+1;
            }
        }int res = 0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                int target = B[i][j],res1=0;
                for(int k=i;k<r;k++){
                    if(B[k][j]>=target)res1+=target;
                    else break;
                }
                 if(res1 > res)res=res1;
            }
        }
        cout<<res<<endl;
    }
    return 0;
}
***darsh recently found***
#include <bits/stdc++.h>
using namespace std;
int main()
{
 long long ans=0;
 std::vector<long long> v(400010);
 for (int i = 1; i < 400000; i++) {
 ans+=i*floor(sqrt(i))+ceil(i/2.0);
 v[i] = ans;
 }
 int q,l,r,a,b;
 cin>>q;
 while(q--){
 cin>>l>>r;
 a = lower_bound(v.begin(), v.end(),l) - v.begin();
 b = lower_bound(v.begin(), v.end(),r)- v.begin();
 cout<<b-a +1<<endl;
 }

return 0;
printf("while(l<ans1)");
}
***an array a***
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int T,N;
    cin>>T;
    cin>>N;
    int arr[N];
    while(T>0) {
        for(int i = 0;i<N;i++)
            cin>>arr[i];
        sort(arr, arr+N);
        int res = arr[N-1]*arr[N-2];
        cout<<res;
        T--;
    }
    return 0;
}
void sort(int a[],int n)
{
    for(int i=0;i<n-1;i++)
        for(int j=0;j<n-1-i;j++)
            break;
}
***nathan won the man of match***
#include <stdio.h>
void swap(int *xp,int *yp)
{
int temp = *xp;
*xp = *yp;
*yp = temp;
}
void selectionSort(int arr[],int n)
{
int i, j, min_idx;
for (i = 0; i < n-1; i++)
{
min_idx = i;
for (j = i+1; j < n; j++)
if (arr[j] < arr[min_idx])
min_idx = j;
swap(&arr[min_idx], &arr[i]);
}
}
void printArray(int arr[],int size)
{
int i;
for (i=0; i < size; i++)
printf("%d ", arr[i]);
printf("\n");
}
int main()
{
 int n,i;
 scanf("%d",&n);
int arr[n];
for(i=0;i<n;i++)
scanf("%d",&arr[i]);
selectionSort(arr, n);
printArray(arr, n);
return 0;
}
***sajid is an third year student***
#include <bits/stdc++.h>
using namespace std;
void ss(){
 cout<<"while(top<=bottom && right>=left)";
}
void fill0X(int m, int n){
 int i, k = 0, l = 0,r = m, c = n;
 char a[m][n], x = 'Y';
 while (k < m && l < n) {
 for (i = l; i < n; ++i)
 a[k][i] = x;
 k++,i=k;
 while(i < m)
 a[i][n-1] = x,i++;
 n--;
 if (k < m)
 for (i = n; i >= l; --i)
 a[m-1][i] = x;
 m--;
 if (l < n)
 for (i = m; i >= k; --i)
 a[i][l] = x;
 l++;
 x = (x == '0')? 'Y': '0';
 }
 for (i = 0; i < r; i++) {
 for (int j = 0; j < c; j++) {
 cout << a[i][j];
 if(j < c-1)
 cout<<" ";
 }
 cout <<"\n";
 }
}
int main()
{
 int m,n;
 cin>>m>>n;
 fill0X(m, n);
}
***ram has provide inputs two numbers***
#include <iostream>
using namespace std;
#define F0R(i, a) for (int i=0; i<(a); i++)
int main() {
 int n; cin >> n;
 int vals[n]; F0R(i, n) cin >> vals[i];
 long long int hands = 0;
 int curSum = 0;
 F0R(i, n) {
 hands += max(vals[i] - curSum, 0);
 curSum += vals[i] - curSum;
 }
 cout << hands;
}
***saroja and her friends***
#include <bits/stdc++.h>
using namespace std ;
#define f(i,a,n) for(int i=a;i<n;i++)
#define MAXN 111111
const int INF = 1 << 29 ;
typedef long long ll ;
typedef pair < int , int > pii ;
int a[MAXN] ;
int main() {
 int n , c , t ;
 scanf("%d" , &t) ;
 while(t--) {
 scanf("%d %d" , &n ,&c) ;
 f(i,0,n) scanf("%d" , &a[i]) ;
 sort(a , a+n) ;
 int lo = 0 , hi = a[n-1]-a[0] ;
 while(lo < hi) {
 int mid = (lo+hi+1) >> 1 ;
 int i = 0 , j = 1 , cows = 1;
 while(j<n) {
 if(a[j] - a[i] >=mid) i = j++ ,cows++ ;
 else j++ ;
 }
 if(cows>=c) lo = mid ;
 else hi = mid - 1 ;
 }
 printf("%d\n" , hi) ;
 }
 return 0 ;
}
***farmer ayyanar***
#include<bits/stdc++.h>
using namespace std;
int MaxOcurrence(int arr[],int n){
    sort(arr,arr+n);
    int max_count=1,crnt_count=1,res,i;
    for(i=1;i<n;i++){
        if(arr[i]==arr[i-1])
            crnt_count++;
        else{
            if(crnt_count > max_count){
                max_count = crnt_count;
                res = arr[i-1];
            }
            crnt_count = 1;
        }
    }
    if(crnt_count > max_count){
        max_count = crnt_count;
        res = arr[n-1];
    }
    return res;
}
int main(){
    int n,i;
    cin >> n;
    int arr[n];
    for(i= 0;i< n;i++)
        cin >> arr[i];
    cout << MaxOcurrence(arr,n);
    return 0;
}
***simon is studying btech mech***
#include <bits/stdc++.h>
using namespace std;
int main()
{int curr;
multiset<char> mp;string names[] = {"","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","TEN","ELEVEN","TWELVE"};while(cin>>curr){if(curr==999){cout<<"0999"<<'.'<<' ';break;}cout<<curr<<' ';if(curr>12)continue;string now = names[curr];for(auto ch:now){mp.insert(ch);}}for (auto ch : mp) {cout<<ch<<' ';}return 0;printf("char nums[13][256]for(n=0;n<26;n++)");}
***for some reason***
#include <bits/stdc++.h>
using namespace std;
int main()
{
 string s;int n;char c;cin>>n>>s;c=s[0];
 map<char,int> mp;
 mp['K'] = 1;mp['M'] = 2;mp['G'] = 3;mp['T'] = 4;mp['P'] = 5;mp['E'] = 6;mp['Z'] = 7;mp['Y'] = 8;
 float ans = 1.0;
 for (int i = 0; i < mp[s[0]]-1; i++) {
 ans/=1.024;
 }ans = ans*n;
 if(ans*100 <100){
 ans*=1000;
 c = 'E';
 }
 else
 ans/=1.024;
 cout<<setprecision(2)<<fixed<<ans<<' '<<c<<'i'<<'B';return 0;
 cout<<"double siq[PREFIXES],b2q[PREFIXES];for(i=1;i<PREFIXES;i++)";
}
***steve is suspicious***
#include <iostream>
using namespace std;
void ss(){
return;
}
struct node
{
int data;
node *next;
}*head = NULL;
bool found = true;
int n;
void del()
{
int n,i=0;
cin>>n;
node *j = head;
while (j != NULL)
{ i++;
if( j -> next -> data == n)
{
head = j -> next;
break;
}
j = j -> next;
if(i == n)
{
found = false;
break;
}
}
if(!found) cout<<"Invalid Node! ";
cout<<"Linked List:";
while(head != NULL)
cout<<"->"<<head -> data,
head = head -> next;}
void create()
{
int n,i=0,first;cin>>n;node *p1 = new node;cin>>first;p1 -> data = first;
head = p1;
while(i!=n-1)
{
int a;
cin>>a;
node *n = new node;
n -> data = a;
n -> next = NULL;
p1 -> next = n;
p1 = n;
i++;
}
p1 -> next = NULL;
}
int main()
{
create();
del();return 0;cout<<"p1=p1->next for(i=0;i<n;i++) p1=p1->next";
}
***the popular engineering college***
#include <bits/stdc++.h>
using namespace std; 
void MandatoriesSuck(){
printf("struct nodenode *next;void create()for(i=0;i<n;i++)p1=p1->nextvoid del()"); 
}
int main() {
int n,ind = -1,x; 
cin>>n;
int arr[n];
for (int i = 0; i < n; i++)
cin>>arr[i]; 
cin>>x;
for (int i = 0; i < n; i++) 
{ if(arr[i]==x){
ind = i;
break; 
}
} if(ind==-1){
cout<<"Invalid Node! ";
ind = 0; }
cout<<"Linked List:"; for (int i = ind; i < n; i++)
cout<<"->"<<arr[i];
return 0;
}
***the popular engineering college***
